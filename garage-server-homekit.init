#! /bin/sh
### BEGIN INIT INFO
# Provides:          garage-server-homekit
# Required-Start:    $syslog $network
# Required-Stop:     $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: A HomeKit server for raspberry pi to open a garage door written in Go.
# Description:       A HomeKit server for raspberry pi to open a garage door written in Go.
### END INIT INFO

# Author: Dillon Hafer

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Garage Server HomeKit Service"
NAME=garage-server-homekit
PIN= # SET THIS!
RELAY_PIN=25
SLEEP_INTERVAL=500
STATUS_PIN=10
SERVICEVERBOSE=yes
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
WORKINGDIR=/var/www
LOG_FILE="/var/log/$NAME.log"
DAEMON=$WORKINGDIR/$NAME
DAEMON_ARGS="-pin=$PIN -relay-pin=$RELAY_PIN -sleep=$SLEEP_INTERVAL -status-pin=$STATUS_PIN"

# Remember to change the secure pin
#   (e.g. 12391123)
# DO NOT USE the above pin. It's an example only.

SERIAL_NUMBER="$(cat /proc/cpuinfo | grep Serial | cut -d ':' -f 2 | sed 's/^[ \t]*//;s/[ \t]*$//')"

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	export SERIAL_NUMBER=$SERIAL_NUMBER
  start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile \
  --test --chdir $WORKINGDIR \
  --startas /bin/bash -- -c "exec $DAEMON $DAEMON_ARGS >> $LOG_FILE 2>&1" \
  || return 1

  start-stop-daemon --start --quiet --pidfile $PIDFILE --make-pidfile \
  --background --chdir $WORKINGDIR \
  --startas /bin/bash -- -c "exec $DAEMON $DAEMON_ARGS >> $LOG_FILE 2>&1" \
  || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
	# Return
	#   0 if daemon has been stopped
	#   1 if daemon was already stopped
	#   2 if daemon could not be stopped
	#   other if a failure occurred
	start-stop-daemon --stop --quiet --retry=TERM/1/KILL/5 --pidfile $PIDFILE --name $NAME
	RETVAL="$?"
	[ "$RETVAL" = 2 ] && return 2
	start-stop-daemon --stop --quiet --oknodo --retry=0/1/KILL/5 --exec $DAEMON
	[ "$?" = 2 ] && return 2
	# Many daemons don't delete their pidfiles when they exit.
	rm -f $PIDFILE
	return "$RETVAL"
}

#
# Function that updates the daemon/service
#
do_update()
{
  $DAEMON update && chmod +x $DAEMON
}

case "$1" in
  start)
	[ "$SERVICEVERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
	do_start
	case "$?" in
		0|1) [ "$SERVICEVERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$SERVICEVERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  stop)
	[ "$SERVICEVERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
	do_stop
	case "$?" in
		0|1) [ "$SERVICEVERBOSE" != no ] && log_end_msg 0 ;;
		2) [ "$SERVICEVERBOSE" != no ] && log_end_msg 1 ;;
	esac
	;;
  status)
	status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
	;;
  update)
  do_update
  ;;
  restart|force-reload)
	log_daemon_msg "Restarting $DESC" "$NAME"
	do_stop
	case "$?" in
	  0|1)
		do_start
		case "$?" in
			0) log_end_msg 0 ;;
			1) log_end_msg 1 ;; # Old process is still running
			*) log_end_msg 1 ;; # Failed to start
		esac
		;;
	  *)
		# Failed to stop
		log_end_msg 1
		;;
		esac
	;;
  *)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

:
